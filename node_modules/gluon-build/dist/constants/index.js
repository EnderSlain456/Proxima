"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BASH_PATH = exports.FTL_STRING_LINE_REGEX = exports.OBJ_DIR = exports.DIST_DIR = exports.MELON_TMP_DIR = exports.MELON_DIR = exports.CONFIGS_DIR = exports.COMMON_DIR = exports.PATCHES_DIR = exports.SRC_DIR = exports.ENGINE_DIR = exports.PATCH_ARGS = exports.ARCHITECTURE = exports.BUILD_TARGETS = exports.BIN_NAME = void 0;
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
const execa_1 = __importDefault(require("execa"));
const fs_1 = require("fs");
const path_1 = require("path");
const log_1 = require("../log");
exports.BIN_NAME = 'gluon';
exports.BUILD_TARGETS = ['linux', 'windows', 'macos'];
exports.ARCHITECTURE = ['i686', 'x86_64'];
exports.PATCH_ARGS = [
    '--ignore-space-change',
    '--ignore-whitespace',
    '--verbose',
];
exports.ENGINE_DIR = (0, path_1.resolve)(process.cwd(), 'engine');
exports.SRC_DIR = (0, path_1.resolve)(process.cwd(), 'src');
exports.PATCHES_DIR = (0, path_1.resolve)(process.cwd(), 'patches');
exports.COMMON_DIR = (0, path_1.resolve)(process.cwd(), 'common');
exports.CONFIGS_DIR = (0, path_1.resolve)(process.cwd(), 'configs');
exports.MELON_DIR = (0, path_1.resolve)(process.cwd(), '.gluon');
exports.MELON_TMP_DIR = (0, path_1.resolve)(exports.MELON_DIR, 'engine');
exports.DIST_DIR = (0, path_1.resolve)(process.cwd(), 'dist');
(0, fs_1.mkdirSync)(exports.MELON_TMP_DIR, { recursive: true });
/**
 * What we think the current platform might be. Should not be used outside of this
 * file
 */
let CONFIG_GUESS = '';
// We can find the current obj-* dir simply by searching. This shouldn't be to
// hard and is more reliable than autoconf is. This command should only be run
// if the engine directory has already been created
if ((0, fs_1.existsSync)(exports.ENGINE_DIR)) {
    const possibleFolders = (0, fs_1.readdirSync)(exports.ENGINE_DIR, {
        withFileTypes: true,
    })
        .filter((entry) => entry.isDirectory())
        .map((entry) => entry.name)
        .filter((entry) => entry.startsWith('obj-'))
        .map((entry) => entry.replace('obj-', ''));
    if (possibleFolders.length === 0)
        log_1.log.debug("There are no obj-* folders. This may mean you haven't completed a build yet");
    else if (possibleFolders.length === 1)
        CONFIG_GUESS = possibleFolders[0];
    else {
        log_1.log.warning(`There are multiple obj-* folders. Defaulting to obj-${possibleFolders[0]}`);
        CONFIG_GUESS = possibleFolders[0];
    }
}
exports.OBJ_DIR = (0, path_1.resolve)(exports.ENGINE_DIR, `obj-${CONFIG_GUESS}`);
// TODO: Remove this, it is unused
exports.FTL_STRING_LINE_REGEX = /(([a-zA-Z0-9-]*|\.[a-z-]*) =(.*|\.)|\[[a-zA-Z0-9]*\].*(\n\s?\s?})?|\*\[[a-zA-Z0-9]*\] .*(\n\s?\s?})?)/gm;
// =================
// Windows constants
// =================
exports.BASH_PATH = null;
// All windows specific code should be located inside of this if statement
if (process.platform == 'win32') {
    const gitPath = execa_1.default.sync('where.exe git.exe').stdout.toString();
    if (gitPath.includes('git.exe')) {
        // Git is installed on the computer, the bash terminal is probably located
        // somewhere nearby
        log_1.log.debug('Fount git at ' + gitPath);
        log_1.log.debug(`Searching for bash`);
        exports.BASH_PATH = (0, path_1.resolve)(gitPath, '../..', 'bin/bash.exe');
        if (!(0, fs_1.existsSync)(exports.BASH_PATH)) {
            log_1.log.debug(`Could not find bash at ${exports.BASH_PATH}`);
            exports.BASH_PATH = execa_1.default.sync('where.exe bash.exe').stdout.toString();
            if (!exports.BASH_PATH.includes('bash.exe')) {
                log_1.log.error('Could not find bash, aborting');
            }
        }
        log_1.log.debug(`Found bash at ${exports.BASH_PATH}`);
    }
    else {
        log_1.log.error("Git doesn't appear to be installed on this computer. Please install it before continuing");
    }
}
