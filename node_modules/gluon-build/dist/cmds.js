"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.commands = void 0;
exports.commands = [
    {
        cmd: 'bootstrap',
        description: 'Bootstrap the gluon app.',
        requestController: async () => (await Promise.resolve().then(() => __importStar(require('./commands/bootstrap')))).bootstrap,
    },
    {
        cmd: 'build',
        aliases: ['b'],
        description: 'Build the gluon app. Specify the OS param for cross-platform builds.',
        options: [
            {
                arg: '--u, --ui',
                description: 'Only builds the ui. Faster but not as powerful as a regular build.',
            },
            {
                arg: '--skip-patch-check',
                description: "Doesn't check to see if all of the patches have been applied",
            },
        ],
        requestController: async () => (await Promise.resolve().then(() => __importStar(require('./commands/build')))).build,
    },
    {
        cmd: 'discard <file>',
        description: 'Discard a files changes.',
        requestController: async () => (await Promise.resolve().then(() => __importStar(require('./commands/discard')))).discard,
    },
    {
        cmd: 'download [ffVersion]',
        description: 'Download Firefox.',
        requestController: async () => (await Promise.resolve().then(() => __importStar(require('./commands/download')))).download,
    },
    {
        cmd: 'execute',
        description: 'Execute a command inside the engine directory.',
        requestController: async () => (await Promise.resolve().then(() => __importStar(require('./commands/execute')))).execute,
    },
    {
        cmd: 'export-file <file>',
        aliases: ['export'],
        description: 'Export a changed file as a patch.',
        requestController: async () => (await Promise.resolve().then(() => __importStar(require('./commands/export-file')))).exportFile,
    },
    {
        cmd: 'import',
        aliases: ['import-patches', 'i'],
        description: 'Import patches into the browser.',
        requestController: async () => (await Promise.resolve().then(() => __importStar(require('./commands/patches')))).applyPatches,
    },
    {
        cmd: 'ff-init <source>',
        aliases: ['ff-initialise', 'ff-initialize'],
        description: 'Initialise the Firefox directory.',
        requestController: async () => (await Promise.resolve().then(() => __importStar(require('./commands/init')))).init,
    },
    {
        cmd: 'ff-version',
        description: 'Retrieves the version of firefox to build against',
        requestController: async () => (await Promise.resolve().then(() => __importStar(require('./commands/ff-version')))).getFFVersion,
    },
    {
        cmd: 'license-check',
        aliases: ['lc'],
        options: [
            {
                arg: '-n, --no-fix',
                description: "Do not add MPL-2.0 headers to files that don't have it",
            },
        ],
        description: 'Check the src directory for the absence of MPL-2.0 header.',
        requestController: async () => (await Promise.resolve().then(() => __importStar(require('./commands/license-check')))).licenseCheck,
    },
    {
        cmd: 'package',
        aliases: ['pack'],
        description: 'Package the browser for distribution.',
        requestController: async () => (await Promise.resolve().then(() => __importStar(require('./commands/package')))).melonPackage,
    },
    {
        cmd: 'reset',
        description: 'Reset the source directory to stock Firefox.',
        requestController: async () => (await Promise.resolve().then(() => __importStar(require('./commands/reset')))).reset,
    },
    {
        cmd: 'run [chrome]',
        aliases: ['r', 'open'],
        description: 'Run the browser.',
        requestController: async () => (await Promise.resolve().then(() => __importStar(require('./commands/run')))).run,
    },
    {
        cmd: 'setup-project',
        description: 'Sets up a gluon project for the first time',
        requestController: async () => (await Promise.resolve().then(() => __importStar(require('./commands/setupProject')))).setupProject,
    },
    {
        cmd: 'status',
        description: 'Status and files changed for src directory.',
        requestController: async () => (await Promise.resolve().then(() => __importStar(require('./commands/status')))).status,
    },
];
