"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.preserveExistingConfig = void 0;
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
const fs_1 = require("fs");
const config_1 = require("./config");
function preserveExistingConfig() {
    let configExists = false;
    let configContents = '';
    beforeAll(() => {
        if ((0, fs_1.existsSync)(config_1.configPath)) {
            configContents = (0, fs_1.readFileSync)(config_1.configPath, 'utf8');
            configExists = true;
            (0, fs_1.unlinkSync)(config_1.configPath);
        }
    });
    afterAll(() => {
        if (configExists) {
            (0, fs_1.writeFileSync)(config_1.configPath, configContents);
        }
    });
}
exports.preserveExistingConfig = preserveExistingConfig;
describe('hasConfig', () => {
    preserveExistingConfig();
    it('returns false when the config file does not exist', () => expect((0, config_1.hasConfig)()).toBe(false));
    it('returns true when the config file exists', () => {
        (0, fs_1.writeFileSync)(config_1.configPath, '{}');
        expect((0, config_1.hasConfig)()).toBe(true);
        (0, fs_1.unlinkSync)(config_1.configPath);
    });
});
describe('rawConfig', () => {
    preserveExistingConfig();
    it('Returns "{}" when no config exists', () => expect((0, config_1.rawConfig)()).toBe('{}'));
    it('Returns the contents of the config file', () => {
        (0, fs_1.writeFileSync)(config_1.configPath, '{"test": "val"}');
        expect((0, config_1.rawConfig)()).toBe('{"test": "val"}');
        (0, fs_1.unlinkSync)(config_1.configPath);
    });
});
describe('getConfig', () => {
    preserveExistingConfig();
    it('Returns the default config when none exists', () => expect((0, config_1.getConfig)()).toEqual(config_1.defaultConfig));
    it('Returns the default config when the config is empty', () => {
        (0, fs_1.writeFileSync)(config_1.configPath, '{}');
        expect((0, config_1.getConfig)()).toEqual(config_1.defaultConfig);
        (0, fs_1.unlinkSync)(config_1.configPath);
    });
    it('Returns a merged config when there is a specified value', () => {
        (0, fs_1.writeFileSync)(config_1.configPath, '{"name": "val"}');
        expect((0, config_1.getConfig)()).toEqual({ ...config_1.defaultConfig, name: 'val' });
        (0, fs_1.unlinkSync)(config_1.configPath);
    });
    it('Throws an error if there is invalid JSON', () => {
        (0, fs_1.writeFileSync)(config_1.configPath, '{invalid json');
        expect(() => (0, config_1.getConfig)()).toThrowError();
        (0, fs_1.unlinkSync)(config_1.configPath);
    });
    it('Throws an error if the product is invalid', () => {
        (0, fs_1.writeFileSync)(config_1.configPath, '{"version": {"product": "invalid"}}');
        expect(() => (0, config_1.getConfig)()).toThrowError();
        (0, fs_1.unlinkSync)(config_1.configPath);
    });
});
