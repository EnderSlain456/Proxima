"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadFileToLocation = void 0;
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
const fs_1 = require("fs");
const axios_1 = __importDefault(require("axios"));
const cli_progress_1 = __importDefault(require("cli-progress"));
const stream_1 = require("stream");
async function downloadFileToLocation(url, writeOutPath, consoleWriter) {
    return new Promise((resolve, reject) => (async () => {
        const { data, headers } = await axios_1.default.get(url, {
            responseType: 'stream',
        });
        const length = headers['content-length'];
        const writer = (0, fs_1.createWriteStream)(writeOutPath);
        let receivedBytes = 0;
        const progressBar = new cli_progress_1.default.SingleBar({
            stream: consoleWriter
                ? new stream_1.Duplex({
                    write: (chunk, enconding, next) => {
                        consoleWriter(chunk.toString());
                        next();
                    },
                    read: () => {
                        /* Empty output */
                    },
                })
                : process.stdout,
        });
        progressBar.start(length, receivedBytes);
        data.on('data', (chunk) => {
            receivedBytes += chunk.length;
        });
        data.pipe(writer);
        data.on('error', (err) => reject(err));
        const progressInterval = setInterval(() => progressBar.update(receivedBytes), 500);
        data.on('end', () => {
            clearInterval(progressInterval);
            progressBar.stop();
            resolve();
        });
    })());
}
exports.downloadFileToLocation = downloadFileToLocation;
