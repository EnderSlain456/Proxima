"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHash = exports.checkHash = exports.addHash = exports.generateHash = void 0;
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
const promises_1 = require("fs/promises");
const crypto_1 = require("crypto");
const store_1 = require("./store");
/**
 * Generates a hash for a file. The file must be an absolute, normalized path
 * @param file File to generate a hash for
 * @returns The generated hash
 */
async function generateHash(file) {
    // I know that sha1 is not a great hashing algorithm, but it's good enough
    // for tracking file changes
    const hash = (0, crypto_1.createHash)('sha1');
    // Read the file, add it to the hash as a binary. End the hash so I can write
    // it out
    hash.setEncoding('binary');
    hash.write(await (0, promises_1.readFile)(file, 'binary'));
    hash.end();
    // Generate the hash
    return hash.read().toString('hex');
}
exports.generateHash = generateHash;
/**
 * Adds the hash to the store
 * @param file File to check
 */
async function addHash(file) {
    const sha1 = await generateHash(file);
    // Add it to the hash file
    await (0, store_1.writeItem)('hashes', {
        ...(0, store_1.readItem)('hashes').unwrapOr({}),
        [file]: sha1,
    });
}
exports.addHash = addHash;
async function checkHash(file) {
    const hash = getHash(file);
    // If the hash doesn't exist, return false
    if (!hash) {
        return false;
    }
    // Check if the hash matches
    return hash === (await generateHash(file));
}
exports.checkHash = checkHash;
/**
 * Return the stored hash of a file
 * @param file The file path you want to get the hash from
 * @returns The hash of the file
 */
function getHash(file) {
    const hashes = (0, store_1.readItem)('hashes');
    // We need to provide a backup in case the hash has not been created
    return hashes.unwrapOr({})[file] || '';
}
exports.getHash = getHash;
