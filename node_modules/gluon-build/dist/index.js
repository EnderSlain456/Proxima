#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bin_name = exports.config = void 0;
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
const commander_1 = __importStar(require("commander"));
const fs_1 = require("fs");
const path_1 = require("path");
const utils_1 = require("./utils");
const cmds_1 = require("./cmds");
const constants_1 = require("./constants");
const update_check_1 = require("./middleware/update-check");
const registerCommand_1 = require("./middleware/registerCommand");
const log_1 = require("./log");
// We have to use a dynamic require here, otherwise the typescript compiler
// mucks up the directory structure
// eslint-disable-next-line @typescript-eslint/no-var-requires
const { version: gluonVersion } = require('../package.json');
exports.config = utils_1.config;
const program = new commander_1.Command();
let reportedFFVersion;
if ((0, fs_1.existsSync)((0, path_1.resolve)(constants_1.ENGINE_DIR, 'browser', 'config', 'version.txt'))) {
    const version = (0, fs_1.readFileSync)((0, path_1.resolve)(constants_1.ENGINE_DIR, 'browser', 'config', 'version.txt'))
        .toString()
        .replace(/\n/g, '');
    if (version !== exports.config.version.version)
        reportedFFVersion = version;
}
exports.bin_name = constants_1.BIN_NAME;
program
    .storeOptionsAsProperties(false)
    .passCommandToAction(false)
    .name(exports.bin_name)
    .option('-v, --verbose', 'Outputs extra debugging messages to the console')
    .version((0, utils_1.versionFormatter)([
    { name: exports.config.name, value: exports.config.version.displayVersion },
    {
        name: 'Firefox',
        value: `${exports.config.version.version} ${reportedFFVersion ? `(being reported as ${reportedFFVersion})` : ''}`,
    },
    { name: 'Gluon', value: gluonVersion },
    reportedFFVersion
        ? `Mismatch detected between expected Firefox version and the actual version.\nYou may have downloaded the source code using a different version and\nthen switched to another branch.`
        : '',
]));
async function middleware(command) {
    // If the program is verbose, store that fact within the logger
    log_1.log.isDebug = program.opts().verbose;
    await (0, update_check_1.updateCheck)();
    (0, registerCommand_1.registerCommand)(command.name());
}
cmds_1.commands.forEach((command) => {
    var _a;
    if (command.flags) {
        if (command.flags.platforms &&
            !command.flags.platforms.includes(process.platform)) {
            return;
        }
    }
    const buildCommand = commander_1.default
        .command(command.cmd)
        .description(command.description)
        .aliases((command === null || command === void 0 ? void 0 : command.aliases) || [])
        .action(async (...args) => {
        // Start loading the controller in the background whilst middleware is
        // executing
        const controller = command.requestController();
        await middleware(buildCommand);
        (await controller)(...args);
    });
    // Register all of the required options
    (_a = command === null || command === void 0 ? void 0 : command.options) === null || _a === void 0 ? void 0 : _a.forEach((opt) => {
        buildCommand.option(opt.arg, opt.description);
    });
    program.addCommand(buildCommand);
});
process
    .on('uncaughtException', utils_1.errorHandler)
    .on('unhandledException', (err) => (0, utils_1.errorHandler)(err, true));
program.parse(process.argv);
