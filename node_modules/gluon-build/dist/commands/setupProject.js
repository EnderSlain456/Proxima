"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.templateDir = exports.setupProject = void 0;
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
const fs_1 = require("fs");
const promises_1 = require("fs/promises");
const path_1 = require("path");
const prompts_1 = __importDefault(require("prompts"));
const log_1 = require("../log");
const utils_1 = require("../utils");
// =============================================================================
// User interaction portion
async function setupProject() {
    try {
        if ((0, fs_1.existsSync)(utils_1.configPath)) {
            log_1.log.warning('There is already a config file. This will overwrite it!');
            await (0, utils_1.delay)(1000);
        }
        if (utils_1.configPath.includes('.optional')) {
            log_1.log.error('The text ".optional" cannot be in the path to your custom browser');
            process.exit(1);
        }
        // Ask user for assorted information
        const { product } = await (0, prompts_1.default)({
            type: 'select',
            name: 'product',
            message: 'Select a product to fork',
            choices: [
                { title: 'Firefox stable', value: utils_1.SupportedProducts.Firefox },
                {
                    title: 'Firefox extended support (older)',
                    value: utils_1.SupportedProducts.FirefoxESR,
                },
                {
                    title: 'Firefox extended support (newer)',
                    value: utils_1.SupportedProducts.FirefoxESRNext,
                },
                {
                    title: 'Firefox developer edition (Not recommended)',
                    value: utils_1.SupportedProducts.FirefoxDev,
                },
                {
                    title: 'Firefox beta (Not recommended)',
                    value: utils_1.SupportedProducts.FirefoxBeta,
                },
                {
                    title: 'Firefox Nightly (Not recommended)',
                    value: utils_1.SupportedProducts.FirefoxNightly,
                },
            ],
        });
        if (typeof product === 'undefined')
            return;
        const productVersion = await (0, utils_1.getLatestFF)(product);
        const { version, name, appId, vendor, ui } = await (0, prompts_1.default)([
            {
                type: 'text',
                name: 'version',
                message: 'Enter the version of this product',
                initial: productVersion,
            },
            {
                type: 'text',
                name: 'name',
                message: 'Enter a product name',
                initial: 'Example browser',
            },
            {
                type: 'text',
                name: 'vendor',
                message: 'Enter a vendor',
                initial: 'Example company',
            },
            {
                type: 'text',
                name: 'appId',
                message: 'Enter an appid',
                initial: 'com.example.browser',
                // Horrible validation to make sure people don't chose something entirely wrong
                validate: (t) => t.includes('.'),
            },
            {
                type: 'select',
                name: 'ui',
                message: 'Select a ui mode template',
                choices: [
                    {
                        title: 'None',
                        value: 'none',
                    },
                    {
                        title: 'User Chrome (custom browser css, simplest)',
                        value: 'uc',
                    },
                    {
                        title: 'Custom html',
                        value: 'html',
                    },
                ],
            },
        ]);
        const config = {
            name,
            vendor,
            appId,
            version: { product, version, displayVersion: '1.0.0' },
            buildOptions: {
                generateBranding: false,
                windowsUseSymbolicLinks: false,
            },
        };
        await copyRequired();
        if (ui === 'html') {
            await copyOptional([
                'customui',
                'toolkit-mozbuild.patch',
                'confvars-sh.patch',
            ]);
        }
        else if (ui === 'uc') {
            await copyOptional(['browser/themes']);
        }
        (0, fs_1.writeFileSync)(utils_1.configPath, JSON.stringify(config, null, 2));
        // Append important stuff to gitignore
        const gitignore = (0, path_1.join)(utils_1.projectDir, '.gitignore');
        let gitignoreContents = '';
        if ((0, fs_1.existsSync)(gitignore)) {
            gitignoreContents = (0, fs_1.readFileSync)(gitignore).toString();
        }
        gitignoreContents += '\n.dotbuild/\nengine/\nfirefox-*/\nnode_modules/\n';
        (0, fs_1.writeFileSync)(gitignore, gitignoreContents);
    }
    catch (e) {
        console.log(e);
    }
}
exports.setupProject = setupProject;
// =============================================================================
// Filesystem templating
exports.templateDir = (0, path_1.join)(__dirname, '../..', 'template');
async function copyOptional(files) {
    await Promise.all((await (0, utils_1.walkDirectory)(exports.templateDir))
        .filter((f) => f.includes('.optional'))
        .filter((f) => files.map((file) => f.includes(file)).some((b) => b))
        .map(async (file) => {
        const out = (0, path_1.join)(utils_1.projectDir, file.replace(exports.templateDir, '')).replace('.optional', '');
        if (!(0, fs_1.existsSync)(out)) {
            (0, fs_1.mkdirSync)((0, path_1.dirname)(out), { recursive: true });
            await (0, promises_1.copyFile)(file, out);
        }
    }));
}
async function copyRequired() {
    await Promise.all((await (0, utils_1.walkDirectory)(exports.templateDir))
        .filter((f) => !f.includes('.optional'))
        .map(async (file) => {
        const out = (0, path_1.join)(utils_1.projectDir, file.replace(exports.templateDir, ''));
        if (!(0, fs_1.existsSync)(out)) {
            (0, fs_1.mkdirSync)((0, path_1.dirname)(out), { recursive: true });
            await (0, promises_1.copyFile)(file, out);
        }
    }));
}
