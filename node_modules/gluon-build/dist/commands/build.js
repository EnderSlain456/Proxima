"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
const execa_1 = __importDefault(require("execa"));
const fs_1 = require("fs");
const path_1 = require("path");
const __1 = require("..");
const constants_1 = require("../constants");
const log_1 = require("../log");
const patch_check_1 = require("../middleware/patch-check");
const utils_1 = require("../utils");
const platform = {
    win32: 'windows',
    darwin: 'macos',
    linux: 'linux',
};
const applyConfig = async (os) => {
    log_1.log.info('Applying mozconfig...');
    let changeset;
    try {
        // Retrieve changeset
        const { stdout } = await (0, execa_1.default)('git', ['rev-parse', 'HEAD']);
        changeset = stdout.trim();
    }
    catch (e) {
        log_1.log.warning('Melon expects that you are building your browser with git as your version control');
        log_1.log.warning('If you are using some other version control system, please migrate to git');
        log_1.log.warning('Otherwise, you can setup git in this folder by running:');
        log_1.log.warning('   |git init|');
        throw e;
    }
    const templateOptions = {
        name: __1.config.name,
        vendor: __1.config.name,
        appId: __1.config.appId,
        brandingDir: (0, fs_1.existsSync)((0, path_1.join)(constants_1.ENGINE_DIR, 'branding', 'melon'))
            ? 'branding/melon'
            : 'branding/unofficial',
        binName: __1.config.binaryName,
        changeset,
    };
    const commonConfig = (0, utils_1.stringTemplate)((0, fs_1.readFileSync)((0, path_1.resolve)(constants_1.CONFIGS_DIR, 'common', 'mozconfig')).toString(), templateOptions);
    const osConfig = (0, utils_1.stringTemplate)((0, fs_1.readFileSync)((0, path_1.resolve)(constants_1.CONFIGS_DIR, os, 'mozconfig')).toString(), templateOptions);
    // Allow a custom config to be placed in /mozconfig. This will not be committed
    // to origin
    let customConfig = (0, fs_1.existsSync)((0, path_1.join)(process.cwd(), 'mozconfig'))
        ? (0, fs_1.readFileSync)((0, path_1.join)(process.cwd(), 'mozconfig')).toString()
        : '';
    customConfig = (0, utils_1.stringTemplate)(customConfig, templateOptions);
    const internalConfig = `# Internally defined by melon`;
    const mergedConfig = `# This file is automatically generated. You should only modify this if you know what you are doing!\n\n` +
        commonConfig +
        '\n\n' +
        osConfig +
        '\n\n' +
        customConfig +
        '\n\n' +
        internalConfig;
    (0, fs_1.writeFileSync)((0, path_1.resolve)(constants_1.ENGINE_DIR, 'mozconfig'), mergedConfig);
    log_1.log.info(`Config for this \`${os}\` build:`);
    mergedConfig.split('\n').map((ln) => {
        if (ln.startsWith('mk') || ln.startsWith('ac') || ln.startsWith('export'))
            log_1.log.info(`\t${ln
                .replace(/mk_add_options /, '')
                .replace(/ac_add_options /, '')
                .replace(/export /, '')}`);
    });
};
const genericBuild = async (os, fast = false) => {
    log_1.log.info(`Building for "${os}"...`);
    log_1.log.warning(`If you get any dependency errors, try running |${__1.bin_name} bootstrap|.`);
    const buildOptions = ['build'];
    if (fast) {
        buildOptions.push('faster');
    }
    log_1.log.debug(`Running with build options ${buildOptions.join(', ')}`);
    log_1.log.debug(`Mach exists: ${(0, fs_1.existsSync)((0, path_1.join)(constants_1.ENGINE_DIR, 'mach'))}`);
    log_1.log.debug(`Mach contents: \n ${(0, fs_1.readFileSync)((0, path_1.join)(constants_1.ENGINE_DIR, 'mach'))}\n\n===END===`);
    await (0, utils_1.configDispatch)('./mach', {
        args: buildOptions,
        cwd: constants_1.ENGINE_DIR,
        killOnError: true,
    });
};
const parseDate = (d) => {
    d /= 1000;
    const h = Math.floor(d / 3600);
    const m = Math.floor((d % 3600) / 60);
    const s = Math.floor((d % 3600) % 60);
    const hDisplay = h > 0 ? h + (h == 1 ? ' hour, ' : ' hours, ') : '';
    const mDisplay = m > 0 ? m + (m == 1 ? ' minute, ' : ' minutes, ') : '';
    const sDisplay = s > 0 ? s + (s == 1 ? ' second' : ' seconds') : '';
    return hDisplay + mDisplay + sDisplay;
};
const success = (date) => {
    // mach handles the success messages
    console.log();
    log_1.log.info(`Total build time: ${parseDate(Date.now() - date)}.`);
};
const build = async (options) => {
    const d = Date.now();
    // Host build
    const prettyHost = platform[process.platform];
    if (constants_1.BUILD_TARGETS.includes(prettyHost)) {
        if (!options.skipPatchCheck)
            await (0, patch_check_1.patchCheck)();
        await applyConfig(prettyHost);
        log_1.log.info('Starting build...');
        await genericBuild(prettyHost, options.ui).then(() => success(d));
    }
};
exports.build = build;
