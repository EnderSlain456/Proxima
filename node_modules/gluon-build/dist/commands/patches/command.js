"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyPatches = void 0;
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
const glob_1 = require("glob");
const listr_1 = __importDefault(require("listr"));
const constants_1 = require("../../constants");
const gitPatch = __importStar(require("./gitPatch"));
const copyPatch = __importStar(require("./copyPatches"));
const brandingPatch = __importStar(require("./brandingPatch"));
const path_1 = require("path");
const fs_1 = require("fs");
const patch_check_1 = require("../../middleware/patch-check");
const utils_1 = require("../../utils");
const log_1 = require("../../log");
function patchMethod(name, patches, patchFn) {
    return {
        title: `Apply ${patches.length} ${name} patches`,
        task: () => new listr_1.default(patches.map((patch, index) => ({
            title: `Apply ${patch.name}`,
            task: () => patchFn(patch, index),
            skip: patch.skip,
        }))),
    };
}
function importMelonPatches() {
    return patchMethod('branding', [
        ...brandingPatch.get().map((name) => ({
            type: 'branding',
            name,
            value: name,
            skip: async () => {
                const logoCheck = (0, utils_1.checkHash)((0, path_1.join)(brandingPatch.BRANDING_DIR, name, 'logo.png'));
                const macosInstallerCheck = (0, utils_1.checkHash)((0, path_1.join)(brandingPatch.BRANDING_DIR, name, 'MacOSInstaller.svg'));
                if ((await logoCheck) &&
                    (await macosInstallerCheck) &&
                    (0, fs_1.existsSync)((0, path_1.join)(constants_1.ENGINE_DIR, 'browser/branding', name))) {
                    return `${name} has already been applied`;
                }
                return;
            },
        })),
    ], async (patch) => await brandingPatch.apply(patch.value));
}
function importFolders() {
    return patchMethod('folder', copyPatch.get(), async (patch) => await copyPatch.apply(patch.src));
}
function importGitPatch() {
    const patches = (0, glob_1.sync)('**/*.patch', { nodir: true, cwd: constants_1.SRC_DIR }).map((path) => (0, path_1.join)(constants_1.SRC_DIR, path));
    (0, fs_1.writeFileSync)(patch_check_1.patchCountFile, patches.length.toString());
    return patchMethod('git', patches.map((path) => ({ name: path, path })), async (patch) => await gitPatch.apply(patch.path));
}
async function applyPatches() {
    await new listr_1.default([importMelonPatches(), importFolders(), importGitPatch()], {
        renderer: log_1.log.isDebug ? 'verbose' : 'default',
    }).run();
}
exports.applyPatches = applyPatches;
