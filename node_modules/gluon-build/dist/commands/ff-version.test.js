"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
const config = __importStar(require("../utils/config"));
const ff_version_1 = require("./ff-version");
describe('getFFVersion', () => {
    it('Returns not specified with an empty config', () => {
        const log = jest.spyOn(console, 'log');
        config.setMockRawConfig('{}');
        (0, ff_version_1.getFFVersion)();
        expect(log).toBeCalled();
        expect(log).toBeCalledWith('Not Specified');
        log.mockRestore();
    });
    it('Returns the version from the config', () => {
        const log = jest.spyOn(console, 'log');
        config.setMockRawConfig(`{"version": { "version": "1.2.3", "product": "firefox" }}`);
        (0, ff_version_1.getFFVersion)();
        expect(log).toBeCalled();
        expect(log).toBeCalledWith('1.2.3');
        log.mockRestore();
    });
});
