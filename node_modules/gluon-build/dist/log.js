"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.log = void 0;
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
const chalk_1 = __importDefault(require("chalk"));
const prompts_1 = __importDefault(require("prompts"));
class Log {
    constructor() {
        this.isDebug = false;
        const d = new Date();
        this.startTime = d.getTime();
    }
    getDiff() {
        const d = new Date();
        const currentTime = d.getTime();
        const elapsedTime = currentTime - this.startTime;
        const secs = Math.floor((elapsedTime / 1000) % 60);
        const mins = Math.floor((elapsedTime / (60 * 1000)) % 60);
        const hours = Math.floor((elapsedTime / (60 * 60 * 1000)) % 24);
        const format = (r) => (r.toString().length == 1 ? `0${r}` : r);
        return `${format(hours)}:${format(mins)}:${format(secs)}`;
    }
    /**
     * A version of info that only outputs when in debug mode.
     *
     * @param args The information you want to provide to the user
     */
    debug(...args) {
        if (this.isDebug)
            console.debug(...args);
    }
    /**
     * Provides information to the user. If you intend to provide debugging
     * information that should be hidden unless verbose mode is enabled, use
     * `debug` instead.
     *
     * @param args The information you want to provide to the user
     */
    info(...args) {
        console.info(chalk_1.default.blueBright.bold(this.getDiff()), ...args);
    }
    /**
     * Provides text intended to be a warning to the user. If it is not critical,
     * for example, something is missing, but probably doesn't matter, use `info`
     * or even `debug` instead.
     *
     * @param args The information you want to provide to the user
     */
    warning(...args) {
        console.warn(chalk_1.default.yellowBright.bold(' WARNING'), ...args);
    }
    /**
     * A warning that requires the user to take an action to continue, otherwise
     * the process will exit.
     *
     * @param args The information you want to provide to the user
     */
    async hardWarning(...args) {
        console.info('', chalk_1.default.bgRed.bold('WARNING'), ...args);
        const { answer } = await (0, prompts_1.default)({
            type: 'confirm',
            name: 'answer',
            message: 'Are you sure you want to continue?',
        });
        if (!answer)
            process.exit(0);
    }
    /**
     * Outputs a success message to the console
     *
     * @param args The information you want to provide to the user
     */
    success(...args) {
        console.log();
        console.log(`\n${chalk_1.default.greenBright.bold('SUCCESS')}`, ...args);
    }
    /**
     * Throws an error based on the input
     *
     * @param args The error you want to throw or a type that you want to convert to an error
     */
    error(...args) {
        throw args[0] instanceof Error
            ? args[0]
            : new Error(...args.map((a) => typeof a !== 'undefined' ? a.toString() : a));
    }
    /**
     * Asks for an error report to our issue tracker. Should be used in chases
     * where we don't think an error will occur, but we want to know if it does
     * to fix it
     */
    askForReport() {
        console.info('The following error is a bug. Please open an issue on the gluon issue structure with a link to your repository and the output from this command.');
        console.info('The gluon issue tracker is located at: https://github.com/pulse-browser/gluon/issues');
    }
}
exports.log = new Log();
